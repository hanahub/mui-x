{
  "componentDescription": "",
  "propDescriptions": {
    "ampm": {
      "description": "12h/24h view for hour selection clock.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "autoFocus": {
      "description": "If <code>true</code>, the <code>input</code> element is focused during the first mount.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "clearable": {
      "description": "If <code>true</code>, a clear button will be shown in the field allowing value clearing.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "color": {
      "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the <a href=\"https://mui.com/material-ui/customization/palette/#adding-new-colors\">palette customization guide</a>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "components": {
      "description": "Overridable components.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "componentsProps": {
      "description": "The props used for each component slot.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableFuture": {
      "description": "If <code>true</code>, disable values after the current date for date components, time for time components and both for date time components.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disableIgnoringDatePartForTimeValidation": {
      "description": "Do not ignore date part when validating min/max time.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "disablePast": {
      "description": "If <code>true</code>, disable values before the current date for date components, time for time components and both for date time components.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "focused": {
      "description": "If <code>true</code>, the component is displayed in focused state.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "format": {
      "description": "Format of the date when rendered in the input(s).",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "formatDensity": {
      "description": "Density of the format when rendered in the input. Setting <code>formatDensity</code> to <code>&quot;spacious&quot;</code> will add a space before and after each <code>/</code>, <code>-</code> and <code>.</code> character.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "FormHelperTextProps": {
      "description": "Props applied to the <a href=\"/material-ui/api/form-helper-text/\"><code>FormHelperText</code></a> element.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "fullWidth": {
      "description": "If <code>true</code>, the input will take up the full width of its container.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "helperText": {
      "description": "The helper text content.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "hiddenLabel": {
      "description": "If <code>true</code>, the label is hidden. This is used to increase density for a <code>FilledInput</code>. Be sure to add <code>aria-label</code> to the <code>input</code> element.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "id": {
      "description": "The id of the <code>input</code> element. Use this prop to make <code>label</code> and <code>helperText</code> accessible for screen readers.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "InputLabelProps": {
      "description": "Props applied to the <a href=\"/material-ui/api/input-label/\"><code>InputLabel</code></a> element. Pointer events like <code>onClick</code> are enabled if and only if <code>shrink</code> is <code>true</code>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "inputProps": {
      "description": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the <code>input</code> element.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "InputProps": {
      "description": "Props applied to the Input element. It will be a <a href=\"/material-ui/api/filled-input/\"><code>FilledInput</code></a>, <a href=\"/material-ui/api/outlined-input/\"><code>OutlinedInput</code></a> or <a href=\"/material-ui/api/input/\"><code>Input</code></a> component depending on the <code>variant</code> prop value.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "inputRef": {
      "description": "Pass a ref to the <code>input</code> element.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "label": { "description": "The label content.", "deprecated": "", "typeDescriptions": {} },
    "margin": {
      "description": "If <code>dense</code> or <code>normal</code>, will adjust vertical spacing of this and contained components.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "maxDate": {
      "description": "Maximal selectable date.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "maxDateTime": {
      "description": "Maximal selectable moment of time with binding to date, to set max time in each day use <code>maxTime</code>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "maxTime": {
      "description": "Maximal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "minDate": {
      "description": "Minimal selectable date.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "minDateTime": {
      "description": "Minimal selectable moment of time with binding to date, to set min time in each day use <code>minTime</code>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "minTime": {
      "description": "Minimal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "minutesStep": {
      "description": "Step over minutes.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "name": {
      "description": "Name attribute of the <code>input</code> element.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onChange": {
      "description": "Callback fired when the value changes.",
      "deprecated": "",
      "typeDescriptions": {
        "value": "The new value.",
        "context": "The context containing the validation result of the current value."
      }
    },
    "onClear": {
      "description": "Callback fired when the clear button is clicked.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "onError": {
      "description": "Callback fired when the error associated to the current value changes.",
      "deprecated": "",
      "typeDescriptions": {
        "error": "The new error.",
        "value": "The value associated to the error."
      }
    },
    "onSelectedSectionsChange": {
      "description": "Callback fired when the selected sections change.",
      "deprecated": "",
      "typeDescriptions": { "newValue": "The new selected sections." }
    },
    "readOnly": {
      "description": "It prevents the user from changing the value of the field (not from interacting with the field).",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "referenceDate": {
      "description": "The date used to generate a part of the new value that is not present in the format when both <code>value</code> and <code>defaultValue</code> are empty. For example, on time fields it will be used to determine the date to set.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "required": {
      "description": "If <code>true</code>, the label is displayed as required and the <code>input</code> element is required.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "selectedSections": {
      "description": "The currently selected sections. This prop accept four formats: 1. If a number is provided, the section at this index will be selected. 2. If an object with a <code>startIndex</code> and <code>endIndex</code> properties are provided, the sections between those two indexes will be selected. 3. If a string of type <code>FieldSectionType</code> is provided, the first section with that name will be selected. 4. If <code>null</code> is provided, no section will be selected If not provided, the selected sections will be handled internally.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "shouldDisableClock": {
      "description": "Disable specific clock time.",
      "deprecated": "",
      "typeDescriptions": {
        "clockValue": "The value to check.",
        "view": "The clock type of the timeValue.",
        "boolean": "If <code>true</code> the time will be disabled."
      }
    },
    "shouldDisableDate": {
      "description": "Disable specific date.",
      "deprecated": "",
      "typeDescriptions": {
        "day": "The date to test.",
        "boolean": "If <code>true</code> the date will be disabled."
      }
    },
    "shouldDisableMonth": {
      "description": "Disable specific month.",
      "deprecated": "",
      "typeDescriptions": {
        "month": "The month to test.",
        "boolean": "If <code>true</code>, the month will be disabled."
      }
    },
    "shouldDisableTime": {
      "description": "Disable specific time.",
      "deprecated": "",
      "typeDescriptions": {
        "value": "The value to check.",
        "view": "The clock type of the timeValue.",
        "boolean": "If <code>true</code> the time will be disabled."
      }
    },
    "shouldDisableYear": {
      "description": "Disable specific year.",
      "deprecated": "",
      "typeDescriptions": {
        "year": "The year to test.",
        "boolean": "If <code>true</code>, the year will be disabled."
      }
    },
    "shouldRespectLeadingZeros": {
      "description": "If <code>true</code>, the format will respect the leading zeroes (e.g: on dayjs, the format <code>M/D/YYYY</code> will render <code>8/16/2018</code>) If <code>false</code>, the format will always add leading zeroes (e.g: on dayjs, the format <code>M/D/YYYY</code> will render <code>08/16/2018</code>)<br>Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: &quot;DD&quot;), so <code>shouldRespectLeadingZeros={true}</code> might lead to inconsistencies when using <code>AdapterLuxon</code>.<br>Warning n°2: When <code>shouldRespectLeadingZeros={true}</code>, the field will add an invisible character on the sections containing a single digit to make sure <code>onChange</code> is fired. If you need to get the clean value from the input, you can remove this character using <code>input.value.replace(/\\u200e/g, &#39;&#39;)</code>.<br>Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros. This mean that when using <code>shouldRespectLeadingZeros={false}</code>, if you retrieve the value directly from the input (not listening to <code>onChange</code>) and your format contains tokens without leading zeros, the value will not be parsed by your library.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "size": {
      "description": "The size of the component.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slotProps": {
      "description": "The props used for each component slot.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "slots": {
      "description": "Overridable component slots.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "timezone": {
      "description": "Choose which timezone to use for the value. Example: &quot;default&quot;, &quot;system&quot;, &quot;UTC&quot;, &quot;America/New_York&quot;. If you pass values from other timezones to some props, they will be converted to this timezone before being used.<br>See the <a href=\"https://mui.com/x/react-date-pickers/timezone/\">timezones documention</a> for more details.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "unstableFieldRef": {
      "description": "The ref object used to imperatively interact with the field.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "value": {
      "description": "The selected value. Used when the component is controlled.",
      "deprecated": "",
      "typeDescriptions": {}
    },
    "variant": { "description": "The variant to use.", "deprecated": "", "typeDescriptions": {} }
  },
  "classDescriptions": { "root": { "description": "Styles applied to the root element." } },
  "slotDescriptions": {
    "clearButton": "Button to clear the value.",
    "clearIcon": "Icon to display inside the clear button.",
    "textField": "Form control with an input to render the value. Receives the same props as <code>@mui/material/TextField</code>."
  }
}
