{
  "componentDescription": "",
  "propDescriptions": {
    "ampm": "12h/24h view for hour selection clock.",
    "ampmInClock": "Display ampm controls under the clock (instead of in the toolbar).",
    "autoFocus": "If <code>true</code>, the main element is focused during the first mount. This main element is: - the element chosen by the visible view if any (i.e: the selected day on the <code>day</code> view). - the <code>input</code> element if there is a field rendered.",
    "className": "Class name applied to the root element.",
    "closeOnSelect": "If <code>true</code> the popup or dialog will close after submitting full date.",
    "components": "Overrideable components.",
    "componentsProps": "The props used for each component slot.",
    "dayOfWeekFormatter": "Formats the day of week displayed in the calendar header.<br><br><strong>Signature:</strong><br><code>function(day: string) =&gt; string</code><br><em>day:</em> The day of week provided by the adapter&#39;s method <code>getWeekdays</code>.<br> <em>returns</em> (string): The name to display.",
    "defaultCalendarMonth": "Default calendar month displayed when <code>value={null}</code>.",
    "defaultValue": "The default value. Used when the component is not controlled.",
    "disabled": "If <code>true</code>, the picker and text field are disabled.",
    "disableFuture": "If <code>true</code> disable values after the current date for date components, time for time components and both for date time components.",
    "disableHighlightToday": "If <code>true</code>, today&#39;s date is rendering without highlighting with circle.",
    "disableIgnoringDatePartForTimeValidation": "Do not ignore date part when validating min/max time.",
    "disableOpenPicker": "Do not render open picker button (renders only the field).",
    "disablePast": "If <code>true</code> disable values before the current date for date components, time for time components and both for date time components.",
    "displayWeekNumber": "If <code>true</code>, the week number will be display in the calendar.",
    "fixedWeekNumber": "Calendar will show more weeks in order to match this value. Put it to 6 for having fix number of week in Gregorian calendars",
    "format": "Format of the date when rendered in the input(s). Defaults to localized format based on the used <code>views</code>.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "label": "The label content.",
    "loading": "If <code>true</code> renders <code>LoadingComponent</code> in calendar instead of calendar view. Can be used to preload information and show it in calendar.",
    "localeText": "Locale for components texts. Allows overriding texts coming from <code>LocalizationProvider</code> and <code>theme</code>.",
    "maxDate": "Maximal selectable date.",
    "maxDateTime": "Maximal selectable moment of time with binding to date, to set max time in each day use <code>maxTime</code>.",
    "maxTime": "Maximal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>.",
    "minDate": "Minimal selectable date.",
    "minDateTime": "Minimal selectable moment of time with binding to date, to set min time in each day use <code>minTime</code>.",
    "minTime": "Minimal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>.",
    "minutesStep": "Step over minutes.",
    "onAccept": "Callback fired when the value is accepted.<br><br><strong>Signature:</strong><br><code>function(value: TValue) =&gt; void</code><br><em>value:</em> The value that was just accepted.",
    "onChange": "Callback fired when the value changes.<br><br><strong>Signature:</strong><br><code>function(value: TValue, The: FieldChangeHandlerContext&lt;TError&gt;) =&gt; void</code><br><em>value:</em> The new value.<br><em>The:</em> context containing the validation result of the current value.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
    "onError": "Callback fired when the error associated to the current value changes. If the error has a non-null value, then the <code>TextField</code> will be rendered in <code>error</code> state.<br><br><strong>Signature:</strong><br><code>function(error: TError, value: TValue) =&gt; void</code><br><em>error:</em> The new error describing why the current value is not valid.<br><em>value:</em> The value associated to the error.",
    "onMonthChange": "Callback firing on month change @DateIOType.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; void | Promise</code><br><em>month:</em> The new month.<br> <em>returns</em> (void | Promise): -",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
    "onSelectedSectionsChange": "Callback fired when the selected sections change.<br><br><strong>Signature:</strong><br><code>function(newValue: FieldSelectedSections) =&gt; void</code><br><em>newValue:</em> The new selected sections.",
    "onViewChange": "Callback fired on view change.<br><br><strong>Signature:</strong><br><code>function(view: TView) =&gt; void</code><br><em>view:</em> The new view.",
    "onYearChange": "Callback firing on year change @DateIOType.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; void</code><br><em>year:</em> The new year.",
    "open": "Control the popup or dialog open state.",
    "openTo": "The default visible view. Used when the component view is not controlled. Must be a valid option from <code>views</code> list.",
    "orientation": "Force rendering in particular orientation.",
    "reduceAnimations": "Disable heavy animations.",
    "renderLoading": "Component displaying when passed <code>loading</code> true.<br><br><strong>Signature:</strong><br><code>function() =&gt; React.ReactNode</code><br><br> <em>returns</em> (React.ReactNode): The node to render when loading.",
    "selectedSections": "The currently selected sections. This prop accept four formats: 1. If a number is provided, the section at this index will be selected. 2. If an object with a <code>startIndex</code> and <code>endIndex</code> properties are provided, the sections between those two indexes will be selected. 3. If a string of type <code>MuiDateSectionName</code> is provided, the first section with that name will be selected. 4. If <code>null</code> is provided, no section will be selected If not provided, the selected sections will be handled internally.",
    "shouldDisableClock": "Disable specific clock time.<br><br><strong>Signature:</strong><br><code>function(clockValue: number, view: TimeView) =&gt; boolean</code><br><em>clockValue:</em> The value to check.<br><em>view:</em> The clock type of the timeValue.<br> <em>returns</em> (boolean): If <code>true</code> the time will be disabled.",
    "shouldDisableDate": "Disable specific date.<br><br><strong>Signature:</strong><br><code>function(day: TDate) =&gt; boolean</code><br><em>day:</em> The date to test.<br> <em>returns</em> (boolean): If <code>true</code> the date will be disabled.",
    "shouldDisableMonth": "Disable specific month.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; boolean</code><br><em>month:</em> The month to test.<br> <em>returns</em> (boolean): If <code>true</code> the month will be disabled.",
    "shouldDisableTime": "Disable specific time.<br><br><strong>Signature:</strong><br><code>function(value: TDate, view: TimeView) =&gt; boolean</code><br><em>value:</em> The value to check.<br><em>view:</em> The clock type of the timeValue.<br> <em>returns</em> (boolean): If <code>true</code> the time will be disabled.",
    "shouldDisableYear": "Disable specific year.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; boolean</code><br><em>year:</em> The year to test.<br> <em>returns</em> (boolean): If <code>true</code> the year will be disabled.",
    "showDaysOutsideCurrentMonth": "If <code>true</code>, days that have <code>outsideCurrentMonth={true}</code> are displayed.",
    "showToolbar": "If <code>true</code>, the toolbar will be visible.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "value": "The selected value. Used when the component is controlled.",
    "view": "The visible view. Used when the component view is controlled. Must be a valid option from <code>views</code> list.",
    "viewRenderers": "Define custom view renderers for each section. If <code>null</code>, the section will only have field editing. If <code>undefined</code>, internally defined view will be the used.",
    "views": "Available views."
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "Tabs": "Tabs enabling toggling between date and time pickers.",
    "Toolbar": "Custom component for the toolbar rendered above the views.",
    "SwitchViewButton": "Button displayed to switch between different calendar views.",
    "SwitchViewIcon": "Icon displayed in the SwitchViewButton. Rotated by 180Â° when the open view is &#39;year&#39;.",
    "PreviousIconButton": "Button allowing to switch to the left view.",
    "NextIconButton": "Button allowing to switch to the right view.",
    "LeftArrowIcon": "Icon displayed in the left view switch button.",
    "RightArrowIcon": "Icon displayed in the right view switch button.",
    "Day": "Custom component for day.\nCheck the <a href=\"https://mui.com/x/api/date-pickers/pickers-day/\">PickersDay</a> component.",
    "ActionBar": "Custom component for the action bar, it is placed bellow the picker views.",
    "PaperContent": "Custom component wrapping the views of the desktop and static pickers (it is the direct child of the Paper component).",
    "Input": "Component used to render an HTML input inside the field.",
    "InputAdornment": "Component displayed on the start or end input adornment used to open the picker on desktop.",
    "OpenPickerButton": "Button to open the picker on desktop.",
    "DesktopPaper": "Custom component for the paper rendered inside the desktop picker&#39;s Popper.",
    "DesktopTransition": "Custom component for the desktop popper <a href=\"https://mui.com/material-ui/transitions\">Transition</a>.",
    "DesktopTrapFocus": "Custom component for trapping the focus inside the views on desktop.",
    "Popper": "Custom component for the popper inside which the views are rendered on desktop.",
    "Layout": "Custom component for wrapping the layout.\nIt wraps the toolbar, views, and action bar.",
    "Field": "Component used to enter the date with the keyboard.",
    "OpenPickerIcon": "Icon displayed in the open picker button on desktop."
  }
}
