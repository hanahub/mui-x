{
  "componentDescription": "",
  "propDescriptions": {
    "acceptRegex": "Regular expression to detect &quot;accepted&quot; symbols.",
    "allowSameDateSelection": "If <code>true</code>, <code>onChange</code> is fired on click even if the same date is selected.",
    "calendars": "The number of calendars that render on <strong>desktop</strong>.",
    "cancelText": "Cancel text message.",
    "className": "className applied to the root component.",
    "clearable": "If <code>true</code>, it shows the clear action in the picker dialog.",
    "clearText": "Clear text message.",
    "components": "The components used for each slot. Either a string to use a HTML element or a component.",
    "componentsProps": "The props used for each slot inside.",
    "defaultCalendarMonth": "Default calendar month displayed when <code>value={null}</code>.",
    "DialogProps": "Props applied to the <a href=\"https://mui.com/material-ui/api/dialog/\"><code>Dialog</code></a> element.",
    "disableAutoMonthSwitching": "If <code>true</code>, after selecting <code>start</code> date calendar will not automatically switch to the month of <code>end</code> date.",
    "disableCloseOnSelect": "If <code>true</code> the popup or dialog will immediately close after submitting full date.",
    "disabled": "If <code>true</code>, the picker and text field are disabled.",
    "disableHighlightToday": "If <code>true</code>, todays date is rendering without highlighting with circle.",
    "disableMaskedInput": "Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.",
    "disableOpenPicker": "Do not render open picker button (renders only text field with validation).",
    "endText": "Text for end input label and toolbar placeholder.",
    "getOpenDialogAriaText": "Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(value: ParseableDate&lt;TDateValue&gt;, utils: MuiPickersAdapter&lt;TDateValue&gt;) =&gt; string</code><br><em>value:</em> The date from which we want to add an aria-text.<br><em>utils:</em> The utils to manipulate the date.<br> <em>returns</em> (string): The aria-text to render inside the dialog.",
    "getViewSwitchingButtonText": "Get aria-label text for switching between views button.<br><br><strong>Signature:</strong><br><code>function(currentView: CalendarPickerView) =&gt; string</code><br><em>currentView:</em> The view from which we want to get the button text.<br> <em>returns</em> (string): The label of the view.",
    "InputAdornmentProps": "Props to pass to keyboard input adornment.",
    "inputFormat": "Format string.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "leftArrowButtonText": "Left arrow icon aria-label text.",
    "loading": "If <code>true</code> renders <code>LoadingComponent</code> in calendar instead of calendar view. Can be used to preload information and show it in calendar.",
    "mask": "Custom mask. Can be used to override generate from format. (e.g. <code>__/__/____ __:__</code> or <code>__/__/____ __:__ _M</code>).",
    "maxDate": "Max selectable date. @DateIOType",
    "minDate": "Min selectable date. @DateIOType",
    "okText": "Ok button text.",
    "onAccept": "Callback fired when date is accepted @DateIOType.<br><br><strong>Signature:</strong><br><code>function(date: TDateValue) =&gt; void</code><br><em>date:</em> The date that was just accepted.",
    "onChange": "Callback fired when the value (the selected date range) changes @DateIOType.<br><br><strong>Signature:</strong><br><code>function(date: DateRange&lt;TDate&gt;, keyboardInputValue: string) =&gt; void</code><br><em>date:</em> The new parsed date range.<br><em>keyboardInputValue:</em> The current value of the keyboard input.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
    "onError": "Callback that fired when input value or new <code>value</code> prop validation returns <strong>new</strong> validation error (or value is valid after error). In case of validation error detected <code>reason</code> prop return non-null value and <code>TextField</code> must be displayed in <code>error</code> state. This can be used to render appropriate form error.<br><a href=\"https://next.material-ui-pickers.dev/guides/forms\">Read the guide</a> about form integration and error displaying.<br><br><strong>Signature:</strong><br><code>function(reason: TError, value: TDateValue) =&gt; void</code><br><em>reason:</em> The reason why the current value is not valid.<br><em>value:</em> The invalid value.",
    "onMonthChange": "Callback firing on month change. @DateIOType<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; void</code><br><em>month:</em> The new month.",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
    "onViewChange": "Callback fired on view change.<br><br><strong>Signature:</strong><br><code>function(view: CalendarPickerView) =&gt; void</code><br><em>view:</em> The new view.",
    "open": "Control the popup or dialog open state.",
    "OpenPickerButtonProps": "Props to pass to keyboard adornment button.",
    "orientation": "Force rendering in particular orientation.",
    "readOnly": "Make picker read only.",
    "reduceAnimations": "Disable heavy animations.",
    "renderDay": "Custom renderer for <code>&lt;DateRangePicker /&gt;</code> days. @DateIOType<br><br><strong>Signature:</strong><br><code>function(day: TDate, dateRangePickerDayProps: DateRangePickerDayProps&lt;TDate&gt;) =&gt; JSX.Element</code><br><em>day:</em> The day to render.<br><em>dateRangePickerDayProps:</em> The props of the day to render.<br> <em>returns</em> (JSX.Element): The element representing the day.",
    "renderInput": "The <code>renderInput</code> prop allows you to customize the rendered input. The <code>startProps</code> and <code>endProps</code> arguments of this render prop contains props of <a href=\"https://mui.com/material-ui/api/text-field/#props\">TextField</a>, that you need to forward to the range start/end inputs respectively. Pay specific attention to the <code>ref</code> and <code>inputProps</code> keys.<br><br><strong>Signature:</strong><br><code>function(startProps: MuiTextFieldProps, endProps: MuiTextFieldProps) =&gt; React.ReactElement</code><br><em>startProps:</em> Props that you need to forward to the range start input.<br><em>endProps:</em> Props that you need to forward to the range end input.<br> <em>returns</em> (React.ReactElement): The range input to render.",
    "renderLoading": "Component displaying when passed <code>loading</code> true.<br><br><strong>Signature:</strong><br><code>function() =&gt; React.ReactNode</code><br><br> <em>returns</em> (React.ReactNode): The node to render when loading.",
    "rifmFormatter": "Custom formatter to be passed into Rifm component.<br><br><strong>Signature:</strong><br><code>function(str: string) =&gt; string</code><br><em>str:</em> The un-formatted string.<br> <em>returns</em> (string): The formatted string.",
    "rightArrowButtonText": "Right arrow icon aria-label text.",
    "shouldDisableDate": "Disable specific date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(day: TDate) =&gt; boolean</code><br><em>day:</em> The date to check.<br> <em>returns</em> (boolean): If <code>true</code> the day will be disabled.",
    "shouldDisableYear": "Disable specific years dynamically. Works like <code>shouldDisableDate</code> but for year selection view @DateIOType.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; boolean</code><br><em>year:</em> The year to test.<br> <em>returns</em> (boolean): Return <code>true</code> if the year should be disabled.",
    "showDaysOutsideCurrentMonth": "If <code>true</code>, days that have <code>outsideCurrentMonth={true}</code> are displayed.",
    "showTodayButton": "If <code>true</code>, the today button is displayed. <strong>Note</strong> that <code>showClearButton</code> has a higher priority.",
    "showToolbar": "If <code>true</code>, show the toolbar even in desktop mode.",
    "startText": "Text for start input label and toolbar placeholder.",
    "todayText": "Today text message.",
    "ToolbarComponent": "Component that will replace default toolbar renderer.",
    "toolbarFormat": "Date format, that is displaying in toolbar.",
    "toolbarPlaceholder": "Mobile picker date value placeholder, displaying if <code>value</code> === <code>null</code>.",
    "toolbarTitle": "Mobile picker title, displaying in the toolbar.",
    "value": "The value of the date range picker."
  },
  "classDescriptions": {},
  "slotDescriptions": {}
}
