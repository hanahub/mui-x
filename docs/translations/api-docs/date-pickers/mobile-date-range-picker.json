{
  "componentDescription": "",
  "propDescriptions": {
    "acceptRegex": "Regular expression to detect &quot;accepted&quot; symbols.",
    "calendars": "The number of calendars that render on <strong>desktop</strong>.",
    "className": "className applied to the root component.",
    "closeOnSelect": "If <code>true</code> the popup or dialog will immediately close after submitting full date.",
    "components": "Overrideable components.",
    "componentsProps": "The props used for each component slot.",
    "dayOfWeekFormatter": "Formats the day of week displayed in the calendar header.<br><br><strong>Signature:</strong><br><code>function(day: string) =&gt; string</code><br><em>day:</em> The day of week provided by the adapter&#39;s method <code>getWeekdays</code>.<br> <em>returns</em> (string): The name to display.",
    "defaultCalendarMonth": "Default calendar month displayed when <code>value={null}</code>.",
    "disableAutoMonthSwitching": "If <code>true</code>, after selecting <code>start</code> date calendar will not automatically switch to the month of <code>end</code> date.",
    "disabled": "If <code>true</code>, the picker and text field are disabled.",
    "disableFuture": "If <code>true</code>, disable values after the current date for date components, time for time components and both for date time components.",
    "disableHighlightToday": "If <code>true</code>, today&#39;s date is rendering without highlighting with circle.",
    "disableMaskedInput": "Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.",
    "disableOpenPicker": "Do not render open picker button (renders only text field with validation).",
    "disablePast": "If <code>true</code>, disable values before the current date for date components, time for time components and both for date time components.",
    "displayWeekNumber": "If <code>true</code>, the week number will be display in the calendar.",
    "fixedWeekNumber": "Calendar will show more weeks in order to match this value. Put it to 6 for having fix number of week in Gregorian calendars",
    "getOpenDialogAriaText": "Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(date: TDate | null, utils: MuiPickersAdapter&lt;TDate&gt;) =&gt; string</code><br><em>date:</em> The date from which we want to add an aria-text.<br><em>utils:</em> The utils to manipulate the date.<br> <em>returns</em> (string): The aria-text to render inside the dialog.",
    "InputAdornmentProps": "Props to pass to keyboard input adornment.",
    "inputFormat": "Format string.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "loading": "If <code>true</code>, calls <code>renderLoading</code> instead of rendering the day calendar. Can be used to preload information and show it in calendar.",
    "localeText": "Locale for components texts",
    "mask": "Custom mask. Can be used to override generate from format. (e.g. <code>__/__/____ __:__</code> or <code>__/__/____ __:__ _M</code>).",
    "maxDate": "Maximal selectable date.",
    "minDate": "Minimal selectable date.",
    "onAccept": "Callback fired when date is accepted @DateIOType.<br><br><strong>Signature:</strong><br><code>function(value: TValue) =&gt; void</code><br><em>value:</em> The value that was just accepted.",
    "onChange": "Callback fired when the value (the selected date range) changes @DateIOType.<br><br><strong>Signature:</strong><br><code>function(date: DateRange&lt;TDate&gt;, keyboardInputValue: string) =&gt; void</code><br><em>date:</em> The new date range.<br><em>keyboardInputValue:</em> The current value of the keyboard input.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
    "onError": "Callback that fired when input value or new <code>value</code> prop validation returns <strong>new</strong> validation error (or value is valid after error). In case of validation error detected <code>reason</code> prop return non-null value and <code>TextField</code> must be displayed in <code>error</code> state. This can be used to render appropriate form error.<br><a href=\"https://next.material-ui-pickers.dev/guides/forms\">Read the guide</a> about form integration and error displaying.<br><br><strong>Signature:</strong><br><code>function(reason: TError, value: TValue) =&gt; void</code><br><em>reason:</em> The reason why the current value is not valid.<br><em>value:</em> The invalid value.",
    "onMonthChange": "Callback firing on month change @DateIOType.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; void | Promise</code><br><em>month:</em> The new month.<br> <em>returns</em> (void | Promise): -",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
    "open": "Control the popup or dialog open state.",
    "OpenPickerButtonProps": "Props to pass to keyboard adornment button.",
    "readOnly": "Make picker read only.",
    "reduceAnimations": "Disable heavy animations.",
    "renderInput": "The <code>renderInput</code> prop allows you to customize the rendered input. The <code>startProps</code> and <code>endProps</code> arguments of this render prop contains props of <a href=\"https://mui.com/material-ui/api/text-field/#props\">TextField</a>, that you need to forward to the range start/end inputs respectively. Pay specific attention to the <code>ref</code> and <code>inputProps</code> keys.<br><br><strong>Signature:</strong><br><code>function(startProps: MuiTextFieldProps, endProps: MuiTextFieldProps) =&gt; React.ReactElement</code><br><em>startProps:</em> Props that you need to forward to the range start input.<br><em>endProps:</em> Props that you need to forward to the range end input.<br> <em>returns</em> (React.ReactElement): The range input to render.",
    "renderLoading": "Component displaying when passed <code>loading</code> true.<br><br><strong>Signature:</strong><br><code>function() =&gt; React.ReactNode</code><br><br> <em>returns</em> (React.ReactNode): The node to render when loading.",
    "rifmFormatter": "Custom formatter to be passed into Rifm component.<br><br><strong>Signature:</strong><br><code>function(str: string) =&gt; string</code><br><em>str:</em> The un-formatted string.<br> <em>returns</em> (string): The formatted string.",
    "shouldDisableDate": "Disable specific date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(day: TDate, position: string) =&gt; boolean</code><br><em>day:</em> The date to test.<br><em>position:</em> The date to test, &#39;start&#39; or &#39;end&#39;.<br> <em>returns</em> (boolean): Returns <code>true</code> if the date should be disabled.",
    "shouldDisableMonth": "Disable specific month.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; boolean</code><br><em>month:</em> The month to test.<br> <em>returns</em> (boolean): If <code>true</code>, the month will be disabled.",
    "shouldDisableYear": "Disable specific year.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; boolean</code><br><em>year:</em> The year to test.<br> <em>returns</em> (boolean): If <code>true</code>, the year will be disabled.",
    "showDaysOutsideCurrentMonth": "If <code>true</code>, days outside the current month are rendered:<br>- if <code>fixedWeekNumber</code> is defined, renders days to have the weeks requested.<br>- if <code>fixedWeekNumber</code> is not defined, renders day to fill the first and last week of the current month.<br>- ignored if <code>calendars</code> equals more than <code>1</code> on range pickers.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "value": "The value of the picker."
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "ActionBar": "Custom component for the action bar, it is placed bellow the picker views.",
    "Day": "Custom component for day in range pickers.\nCheck the <a href=\"https://mui.com/x/api/date-pickers/date-range-picker-day/\">DateRangePickersDay</a> component.",
    "Dialog": "Custom component for the dialog inside which the views are rendered on mobile.",
    "LeftArrowIcon": "Icon displayed in the left view switch button.",
    "MobilePaper": "Custom component for the paper rendered inside the mobile picker&#39;s Dialog.",
    "MobileTransition": "Custom component for the mobile dialog <a href=\"https://mui.com/material-ui/transitions\">Transition</a>.",
    "NextIconButton": "Button allowing to switch to the right view.",
    "OpenPickerIcon": "Icon displayed in the open picker button.",
    "PreviousIconButton": "Button allowing to switch to the left view.",
    "RightArrowIcon": "Icon displayed in the right view switch button.",
    "SwitchViewButton": "Button displayed to switch between different calendar views.",
    "SwitchViewIcon": "Icon displayed in the SwitchViewButton. Rotated by 180Â° when the open view is &#39;year&#39;.",
    "Toolbar": "Custom component for the toolbar rendered above the views."
  }
}
