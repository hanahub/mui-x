name: Cleanup issue comment
run-name: Issue cleanup

on:
  issues:
    types:
      - opened

permissions: {}

jobs:
  issue_cleanup:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const lines = issue.data.body.split('\n')

            const _ = extractInputSection(lines, 'Latest version')
            const searchKeywords = extractInputSection(lines, 'Search keywords')
            const orderID = extractInputSection(lines, 'Order ID or Support key')
            const products = extractInputSection(lines, 'Affected products')

            lines.push('')
            lines.push('**Search keywords**: ' + searchKeywords)
            if (orderID !== '' && orderID !== '_No response_') {
              lines.push('**Order ID**: ' + orderID)
            }

            const body = lines.join('\n')

            const labels = issue.data.labels.map(label => label.name)

            const productMap = {
              'Data Grid': 'data grid',
              'Date and Time Pickers': 'pickers',
              'Charts': 'charts',
              'Tree View': 'tree view',
            }
              
            if (products !== '') {
              products.split(',').forEach(product => {
                if (productMap[product.trim()]) {
                  labels.push(`component: ${productMap[product.trim()]}`)
                }
              })
            }

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
              labels,
            })

            function extractInputSection(lines, title) {
              const index = lines.findIndex(line => line.startsWith('###') && line.includes(title))
              if (index === -1) {
                return ''
              }
              return lines.splice(index, 4)[2].trim()
            }
