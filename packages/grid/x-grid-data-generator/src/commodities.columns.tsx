import {
  randomCommodity,
  randomDesk,
  randomEmail,
  randomFeeRate,
  generateFilledQuantity,
  randomId,
  randomIncoterm,
  generateIsFilled,
  randomQuantity,
  randomTraderName,
  randomUnitPrice,
  randomUnitPriceCurrency,
  randomStatusOptions,
  randomPnL,
  randomTradeDate,
  randomMaturityDate,
  randomBrokerId,
  randomCompanyName,
  randomCountry,
  randomCurrency,
  randomAddress,
  randomCity,
  randomUpdatedDate,
  randomCreatedDate,
  randomRateType,
  randomContractType,
  randomTaxCode,
} from './services';
import {
  renderCountry,
  renderEmail,
  renderIncoterm,
  renderPnl,
  renderProgress,
  renderStatus,
  renderTotalPrice,
  renderEditCurrency,
  renderEditProgress,
  renderEditStatus,
  renderEditIncoterm,
  renderEditTaxCode,
  renderEditContractType,
  renderEditRateType,
} from './renderer';

export const getCommodityColumns: (editable?: boolean) => any[] = (editable = false) =>
  [
    {
      field: 'id',
      generateData: randomId,
      hide: true,
    },
    {
      field: 'desk',
      headerName: 'Desk',
      generateData: randomDesk,
      width: 110,
    },
    {
      field: 'commodity',
      headerName: 'Commodity',
      generateData: randomCommodity,
      width: 180,
      editable: true,
    },
    {
      field: 'traderName',
      headerName: 'Trader Name',
      generateData: randomTraderName,
      width: 120,
      editable: true,
    },
    {
      field: 'traderEmail',
      headerName: 'Trader Email',
      generateData: randomEmail,
      renderCell: renderEmail,

      width: 150,
      editable: true,
    },
    {
      field: 'quantity',
      headerName: 'Quantity',
      type: 'number',
      width: 140,
      generateData: randomQuantity,
      editable: true,

      valueParser: (value: string) => Number(value),
    },
    {
      field: 'filledQuantity',
      headerName: 'Filled Quantity',
      generateData: generateFilledQuantity,
      renderCell: renderProgress,
      renderEditCell: renderEditProgress,
      type: 'number',
      width: 120,
      editable: true,
    },
    {
      field: 'isFilled',
      headerName: 'Is Filled',
      align: 'center',
      generateData: generateIsFilled,
      type: 'boolean',
      width: 80,
      editable: true,
    },
    {
      field: 'status',
      headerName: 'Status',
      generateData: randomStatusOptions,
      renderCell: renderStatus,
      renderEditCell: renderEditStatus,
      width: 150,
      editable: true,
    },
    {
      field: 'unitPrice',
      headerName: 'Unit Price',
      generateData: randomUnitPrice,
      type: 'number',
      editable: true,

      valueParser: (value: string) => Number(value),
    },
    {
      field: 'unitPriceCurrency',
      headerName: 'Unit Price Currency',
      generateData: randomUnitPriceCurrency,
      renderEditCell: renderEditCurrency,
      width: 120,
      editable: true,
    },
    {
      field: 'subTotal',
      headerName: 'Sub Total',
      valueGetter: ({ row }) => row.quantity * row.unitPrice,
      type: 'number',
      width: 120,
    },
    {
      field: 'feeRate',
      headerName: 'Fee Rate',
      generateData: randomFeeRate,
      type: 'number',
      width: 80,
      editable: true,

      valueParser: (value) => Number(value),
    },
    {
      field: 'feeAmount',
      headerName: 'Fee Amount',
      valueGetter: ({ row }) => row.feeRate * row.quantity * row.unitPrice,
      type: 'number',
      width: 120,
    },
    {
      field: 'incoTerm',
      generateData: randomIncoterm,
      renderCell: renderIncoterm,
      renderEditCell: renderEditIncoterm,
      editable: true,
    },
    {
      field: 'totalPrice',
      headerName: 'Total in USD',
      valueGetter: ({ row }) => row.feeRate + row.quantity * row.unitPrice,
      renderCell: renderTotalPrice,
      type: 'number',
      width: 160,
    },
    {
      field: 'pnl',
      headerName: 'PnL',
      generateData: randomPnL,
      renderCell: renderPnl,
      type: 'number',
      width: 140,
    },
    {
      field: 'maturityDate',
      headerName: 'Maturity Date',
      generateData: randomMaturityDate,
      type: 'date',
      editable: true,
    },
    {
      field: 'tradeDate',
      headerName: 'Trade Date',
      generateData: randomTradeDate,
      type: 'date',
      editable: true,
    },
    {
      field: 'brokerId',
      headerName: 'Broker Id',
      generateData: randomBrokerId,
      hide: true,
      editable: true,
    },
    {
      field: 'brokerName',
      headerName: 'Broker Name',
      generateData: randomCompanyName,
      width: 140,
      editable: true,
    },
    {
      field: 'counterPartyName',
      headerName: 'Counterparty',
      generateData: randomCompanyName,
      width: 180,
      editable: true,
    },
    {
      field: 'counterPartyCountry',
      headerName: 'Counterparty Country',
      generateData: randomCountry,
      renderCell: renderCountry,
      width: 120,
    },
    {
      field: 'counterPartyCurrency',
      headerName: 'Counterparty Currency',
      generateData: randomCurrency,
      renderEditCell: renderEditCurrency,
      editable: true,
    },
    {
      field: 'counterPartyAddress',
      headerName: 'Counterparty Address',
      generateData: randomAddress,
      width: 200,
      editable: true,
    },
    {
      field: 'counterPartyCity',
      headerName: 'Counterparty City',
      generateData: randomCity,
      width: 120,
      editable: true,
    },
    {
      field: 'taxCode',
      headerName: 'Tax Code',
      generateData: randomTaxCode,
      renderEditCell: renderEditTaxCode,
      editable: true,
    },
    {
      field: 'contractType',
      headerName: 'Contract Type',
      generateData: randomContractType,
      renderEditCell: renderEditContractType,
      editable: true,
    },
    {
      field: 'rateType',
      headerName: 'Rate Type',
      generateData: randomRateType,
      renderEditCell: renderEditRateType,
      editable: true,
    },
    {
      field: 'lastUpdated',
      headerName: 'Updated on',
      generateData: randomUpdatedDate,
      type: 'dateTime',
      width: 180,
      editable: true,
    },
    {
      field: 'dateCreated',
      headerName: 'Created on',
      generateData: randomCreatedDate,
      type: 'date',
      width: 150,
      editable: true,
    },
  ].map((column) => ({ ...column, editable: editable ? column.editable : false }));
